The topic guide on Django's database-abstraction API described the way that you can use Django
queries that createm retrieve, update and delete individual objects

Thoughout this guild we'll refer to the following models 
These models are used to track the inventory for series of online bookstore

from django.db import models
class Author(models.Models):
  name = models.CharField(max_length=100)
  age = models.IntegerField()

class Publisher(models.Models):
  name = models.CharField(max_length = 300)
  
class Book(models.Models):
  name = models.CharField(max_length = 300)
  pages = models.IntegerField()
  price = models.DecimalField(max_digits=10, decimals_places = 2)
  rating = models.FloatField()
  authors = models.ManyToManyField(Author)
  publisher = models.ForeignKey(Publisher, on_delete=models.CASCADE)
  pubdate = models.DateField()
  
class Store(models.Model):
  name = models.CharField(max_length=300)
  books = models.ManyToManyField(Book)
 
 
 Cheat sheet
 Generating aggregates over a QuerySet
 Generating aggregates for each item in a QuerySet
 Combinning multiple aggregations
 Join and aggregates
 Following relationships backwards
 Aggregations and other QuerySet clauses
 Filer() and exclude()
 Filtering on annotaions
 Oder of annotate() and filter clases 
 Order_by
 Values()
 Order of anotate() and values() clauses
 Interaction with default odering or order_by()
 Agrregating annotations
 
